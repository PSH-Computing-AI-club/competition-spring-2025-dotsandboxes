import type { IGameGlobal } from './game.ts';

export interface WorkerGlobalThis {
    readonly game: IGameGlobal;

    readonly globalThis: WorkerGlobalThis;
    readonly self: WorkerGlobalThis;
    readonly window: WorkerGlobalThis;

    readonly Atomics: Atomics;
    readonly console: typeof console;
    readonly crypto: typeof crypto;
    readonly Intl: typeof Intl;
    readonly Reflect: typeof Reflect;
    readonly Math: Math;
    readonly JSON: JSON;

    readonly AggregateError: AggregateError;
    readonly Error: Error;
    readonly DOMException: DOMException;
    readonly EvalError: EvalError;
    readonly RangeError: RangeError;
    readonly ReferenceError: ReferenceError;
    readonly SyntaxError: SyntaxError;
    readonly TypeError: TypeError;
    readonly URIError: URIError;

    readonly Array: typeof Array;
    readonly ArrayBuffer: ArrayBuffer;
    readonly AbortController: AbortController;
    readonly AbortSignal: AbortSignal;
    readonly BigInt: typeof BigInt;
    readonly BigInt64Array: BigInt64Array;
    readonly BigUint64Array: BigUint64Array;
    readonly Blob: Blob;
    readonly Boolean: typeof Boolean;
    readonly CompressionStream: CompressionStream;
    readonly Date: Date;
    readonly DataView: DataView;
    readonly DecompressionStream: DecompressionStream;
    readonly ByteLengthQueuingStrategy: ByteLengthQueuingStrategy;
    readonly CountQueuingStrategy: CountQueuingStrategy;
    readonly CustomEvent: CustomEvent;
    readonly Event: Event;
    readonly EventTarget: EventTarget;
    readonly Int16Array: Int16Array;
    readonly Int32Array: Int32Array;
    readonly Int8Array: Int8Array;
    readonly Map: typeof Map;
    readonly Number: typeof Number;
    readonly Object: typeof Object;
    readonly Promise: typeof Promise;
    readonly Proxy: typeof Proxy;
    readonly RegExp: RegExp;
    readonly ReadableByteStreamController: ReadableByteStreamController;
    readonly ReadableStream: ReadableStream;
    readonly ReadableStreamBYOBReader: ReadableStreamBYOBReader;
    readonly ReadableStreamBYOBRequest: ReadableStreamBYOBRequest;
    readonly ReadableStreamDefaultController: ReadableStreamDefaultController;
    readonly ReadableStreamDefaultReader: ReadableStreamDefaultReader;
    readonly Set: typeof Set;
    readonly String: typeof String;
    readonly Symbol: typeof Symbol;
    readonly TextDecoder: TextDecoder;
    readonly TextDecoderStream: TextDecoderStream;
    readonly TextEncoder: TextEncoder;
    readonly TextEncoderStream: TextEncoderStream;
    readonly TransformStream: TransformStream;
    readonly TransformStreamDefaultController: TransformStreamDefaultController;
    readonly Uint8Array: Uint8Array;
    readonly Uint16Array: Uint16Array;
    readonly Uint32Array: Uint32Array;
    readonly Uint8ClampedArray: Uint8ClampedArray;
    readonly URL: URL;
    readonly URLPattern: URLPattern;
    readonly URLSearchParams: URLSearchParams;
    readonly WeakMap: typeof WeakMap;
    readonly WeakRef: typeof WeakRef;
    readonly WeakSet: typeof WeakSet;
    readonly WritableStream: WritableStream;
    readonly WritableStreamDefaultController: WritableStreamDefaultController;
    readonly WritableStreamDefaultWriter: WritableStreamDefaultWriter;

    readonly atob: typeof atob;
    readonly btoa: typeof btoa;
    readonly clearInterval: typeof clearInterval;
    readonly clearTimeout: typeof clearTimeout;
    readonly performance: typeof performance;
    readonly queueMicrotask: typeof queueMicrotask;
    readonly setTimeout: typeof setTimeout;
    readonly structuredClone: typeof structuredClone;

    readonly decodeURI: typeof decodeURI;
    readonly decodeURIComponent: typeof decodeURIComponent;
    readonly encodeURI: typeof encodeURI;
    readonly encodeURIComponent: typeof encodeURIComponent;
    readonly parseFloat: typeof parseFloat;
    readonly parseInt: typeof parseInt;
    readonly isNaN: typeof isNaN;
}
